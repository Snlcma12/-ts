class Cone extends Figure {
  constructor(r = 2, count = 8, color = 'lightgreen', x = 0, y = 0, z = 0) {
    const points = [];
    const edges = [];
    const polygons = [];
    //точки
    for (let i = -count; i <= count; i++) {
      const T = ((2 * Math.PI) / count) * i;
      for (let j = 0; j < count; j++) {
        const p = ((2 * Math.PI) / count) * j;
        points.push(
          new Point(r * T * Math.cos(p) + x, r * T + y, Math.sin(p) * r * T + z)
        );
      }
    }

    //ребра
    for (let i = 0; i < points.length; i++) {
      if (i + 1 < points.length && (i + 1) % count !== 0) {
        edges.push(new Edge(i, i + 1));
      } else if ((i + 1) % count === 0) {
        edges.push(new Edge(i, i + 1 - count));
      }
      if (i < points.length - count) {
        edges.push(new Edge(i, i + count));
      }
    }

    // полигоны
    for (let i = 0; i < points.length; i++) {
      if (i + 1 + count < points.length && (i + 1) % count !== 0) {
        polygons.push(new Polygon([i, i + 1, i + 1 + count, i + count], color));
      } else if (i + count < points.length && (i + 1) % count === 0) {
        polygons.push(new Polygon([i, i + 1 - count, i + 1, i + count], color));
      }
    }

    super(points, edges, polygons);
  }
}

class EllipticalParabaloid extends Figure {
    constructor(a = 10, b = 5, count = 20, color = "lightgreen", x = 0, y = 0, z = 0) {
        const points = [];
        const edges = [];
        const polygons = [];

        for (let i = 0; i <= count; i++) {
            const T = ((2 * Math.PI) / count) * i;
            for (let j = 0; j < count; j++) {
                const p = ((2 * Math.PI) / count) * j;
                points.push(new Point(a * T * Math.cos(p) + x, T * T + y, b * T * Math.sin(p) + z));
            }
        }

        for (let i = 0; i < points.length; i++) {
            if (i + 1 < points.length && (i + 1) % count !== 0) {
                edges.push(new Edge(i, i + 1));
            } else if ((i + 1) % count === 0) {
                edges.push(new Edge(i, i + 1 - count));
            }
            if (i < points.length - count) {
                edges.push(new Edge(i, i + count));
            }
        }
        for (let i = 0; i < points.length; i++) {
            if (i + 1 + count < points.length && (i + 1) % count !== 0) {
                polygons.push(new Polygon([i, i + 1, i + 1 + count, i + count], color));
            } else if (i + count < points.length && (i + 1) % count === 0) {
                polygons.push(new Polygon([i, i + 1 - count, i + 1, i + count], color));
            }
        }

        super(points, edges, polygons);
    }
}

class HyperbolicCylinder extends Figure {
  constructor(
    a = 10,
    b = 10,
    count = 20,
    color = 'lightgreen',
    x = 0,
    y = 0,
    z = 0
  ) {
    const points = [];
    const edges = [];
    const polygons = [];

    for (let i = -count / 2; i <= count / 2; i++) {
      const T = (Math.PI / count) * i;
      for (let j = 0; j < count; j++) {
        const p = ((3 * Math.PI) / count) * j;
        points.push(
          new Point(b * Math.sinh(T) + x, a * Math.cosh(T) + y, p * 2 + z)
        );
      }
    }

    for (let i = -count / 2; i <= count / 2; i++) {
      const T = (Math.PI / count) * i;
      for (let j = 0; j < count; j++) {
        const p = ((3 * Math.PI) / count) * j;
        points.push(
          new Point(b * Math.sinh(T) + x, -a * Math.cosh(T) + y, p * 2 + z)
        );
      }
    }

    for (let i = 0; i < points.length; i++) {
      if (i + 1 < points.length && (i + 1) % count != 0) {
        edges.push(new Edge(i, i + 1));
      }
      if (i + count < points.length && i < count * count) {
        edges.push(new Edge(i, i + count));
      }
      if (i + count < points.length && i >= count * count + count) {
        edges.push(new Edge(i, i + count));
      }
    }

    for (let i = 0; i < points.length; i++) {
      if (
        i + count + 1 < points.length &&
        (i + 1) % count != 0 &&
        i < count * count
      ) {
        polygons.push(new Polygon([i, i + 1, count + i + 1, count + i], color));
      }
      if (
        i + count + 1 < points.length &&
        (i + 1) % count != 0 &&
        i >= count * count + count
      ) {
        polygons.push(new Polygon([i, i + 1, count + i + 1, count + i], color));
      }
    }

    super(points, edges, polygons);
  }
}

class HyperbolicParaboloid extends Figure {
  constructor(
    p = 3,
    q = 4,
    count = 10,
    color = 'lightgreen',
    x = 0,
    y = 0,
    z = 0
  ) {
    const points = [];
    const edges = [];
    const polygons = [];

    for (let i = 0; i < count; i++) {
      for (let j = 0; j < count; j++) {
        const x1 = i - count / 2;
        const y1 = j - count / 2;
        const z1 = ((x1 * x1) / p - (y1 * y1) / q) / 2;
        points.push(new Point(x1 + x, z1 + y, y1 + z));
      }
    }

    for (let i = 0; i < points.length; i++) {
      if (points[i + 1]) {
        if ((i + 1) % count !== 0) {
          edges.push(new Edge(i, i + 1));
        }
      }
      if (points[i + count]) {
        edges.push(new Edge(i, i + count));
      }
    }

    for (let i = 0; i < points.length; i++) {
      if (points[i + 1 + count]) {
        if ((i + 1) % count !== 0) {
          polygons.push(
            new Polygon([i, i + 1, i + 1 + count, i + count], color)
          );
        }
      }
    }

    super(points, edges, polygons);
  }
}

class ParabalidCylinder extends Figure {
  constructor(
    a = 10,
    b = 10,
    count = 20,
    color = 'lightgreen',
    x = 0,
    y = 0,
    z = 0
  ) {
    const points = [];
    const edges = [];
    const polygons = [];

    for (let i = -count / 2; i <= count / 2; i++) {
      const T = (Math.PI / count) * i;
      for (let j = 0; j < count; j++) {
        const p = ((3 * Math.PI) / count) * j;
        points.push(
          new Point(b * Math.sinh(T) + x, a * Math.cosh(T) + y, p * 2 + z)
        );
      }
    }

    for (let i = 0; i < points.length; i++) {
      if (i + 1 < points.length && (i + 1) % count != 0) {
        edges.push(new Edge(i, i + 1));
      }
      if (i + count < points.length) {
        edges.push(new Edge(i, i + count));
      }
    }

    for (let i = 0; i < points.length; i++) {
      if (i + count + 1 < points.length && (i + 1) % count != 0) {
        polygons.push(new Polygon([i, i + 1, count + i + 1, count + i], color));
      }
    }

    super(points, edges, polygons);
  }
}

